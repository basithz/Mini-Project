# Create a data generator with rescale to normalize the pixel values between 0 and 1
datagen = ImageDataGenerator(rescale=1./255)

# Optionally, you can apply data augmentation to the training data to improve generalization
train_datagen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=20,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    zoom_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

# Load training data
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=target_size,
    batch_size=32,
    class_mode='binary'
)

# Load test data (no augmentation, just rescaling)
test_generator = datagen.flow_from_directory(
    test_data_dir,
    target_size=target_size,
    batch_size=32,
    class_mode='binary'
)

# Wrap the generators to handle errors
train_safe_generator = create_safe_generator(train_generator)
test_safe_generator = create_safe_generator(test_generator)
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam

# Define the CNN model
model = Sequential()

# First Convolutional Layer
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(227, 227, 3)))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Second Convolutional Layer
model.add(Conv2D(64, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Third Convolutional Layer
model.add(Conv2D(128, (3, 3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))

# Flatten the layers before passing to Dense layers
model.add(Flatten())

# Fully connected (Dense) layer with Dropout for regularization
model.add(Dense(128, activation='relu'))
model.add(Dropout(0.5))  # Dropout to prevent overfitting

# Output Layer for binary classification (fresh vs rotten)
model.add(Dense(1, activation='sigmoid'))  # Binary classification uses sigmoid

# Compile the model
model.compile(optimizer=Adam(learning_rate=0.0001),
              loss='binary_crossentropy',  # Loss function for binary classification
              metrics=['accuracy'])

# Print the model summary
model.summary()
# Train the model
history = model.fit(
    train_safe_generator,  # Training data generator with error handling
    steps_per_epoch=train_generator.samples // train_generator.batch_size,
    epochs=100,  # You can adjust the number of epochs
    validation_data=test_safe_generator,  # Validation data generator with error handling
    validation_steps=test_generator.samples // test_generator.batch_size
)

# Save the model after training
model.save('fruit_model_basi.h5')

# Evaluate the model on the test set
test_loss, test_acc = model.evaluate(test_safe_generator)
print(f"Test Accuracy: {test_acc*100:.2f}%")
print(f"Test Loss: {test_loss:.4f}")
